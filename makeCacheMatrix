## I simply set input x as a matrix.
## and then set the solved value "inv" as a null
## makeCacheMatrix function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
  inv <- NULL
  set <- function(y){
    x <<- y
    inv <<- NULL
  }
  get <- function(){x}
  setInverse <- function(inverse){inv <<- inverse}
  getInverse <- function(){inv}
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}

## cachesolve function computes the inverse of the special matrix returend
cachesolve <- function(x, ...){
  ## returns a matrix that is the inverse of the 'x'
  inv <- x$getInverse()
  if(!is.null(inv)){
    message("getting cache data")
    return(inv)
  }
  mat <- x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
}

